apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: web-app
  name: web-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web-app
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: web-app
    spec:
      containers:
      - image: react-web-app:latest
        name: web-app
        imagePullPolicy: Never
        livenessProbe:
          failureThreshold: 1
          httpGet:
              path: /status
              port: 8081
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /status
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
        resources: {}
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: to-do-api
  name: to-do-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: to-do-api
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: to-do-api
    spec:
      containers:
      - image: to-do-api-springboot:latest
        name: to-do-api
        imagePullPolicy: Never
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8081
          initialDelaySeconds: 10
          timeoutSeconds: 2
          periodSeconds: 3
          failureThreshold: 1
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8081
          initialDelaySeconds: 20
          timeoutSeconds: 2
          periodSeconds: 8
          failureThreshold: 1
        env:
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://postgres:5432/postgres"
        resources: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: postgres
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: postgres
    spec:
      containers:
      - image: postgres:latest
        name: postgres
        resources: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: web-app
  name: web-app
spec:
  ports:
  - name: 8080-800
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: web-app
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: to-do-api
  name: to-do-api
spec:
  ports:
  - name: 3001-8080
    port: 3001
    protocol: TCP
    targetPort: 8080
  selector:
    app: to-do-api
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: postgres
  name: postgres
spec:
  ports:
  - name: 5432-5432
    port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    app: postgres
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: to-do-api-ingress
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: \"false\"
spec:
  rules:
  - http:
      paths:
      - path: /v1
        backend:
          serviceName: to-do-api
          servicePort: 3001
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: web-app-ingress
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: \"false\"
spec:
  rules:
  - http:
      paths:
      - path: /
        backend:
          serviceName: web-app
          servicePort: 8080
